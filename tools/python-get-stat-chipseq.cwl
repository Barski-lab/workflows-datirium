cwlVersion: v1.0
class: CommandLineTool

requirements:
- class: ShellCommandRequirement
- class: InlineJavascriptRequirement
  expressionLib:
  - var get_output_filename = function() {
        if (inputs.output_filename) {
          return inputs.output_filename;
        }
        let root = inputs.bowtie_log.basename.split('.').slice(0,-1).join('.');
        let ext = ".stat";
        return (root == "")?inputs.bowtie_log.basename+ext:root+ext;
    };
  - var get_formatted_output_filename = function() {
        if (inputs.formatted_output_filename) {
            return inputs.formatted_output_filename;
        }
        let root = inputs.bowtie_log.basename.split('.').slice(0,-1).join('.');
        let ext = ".stat";
        return (root == "")?inputs.bowtie_log.basename+ext:root+ext;
    };

hints:
- class: DockerRequirement
  dockerPull: biowardrobe2/scidap:v0.0.2


inputs:

  script:
    type: string?
    default: |
      #!/usr/bin/env python
      import sys, re
      TOTAL, ALIGNED, SUPRESSED, USED = 100, 80, 0, 0
      with open(sys.argv[1], 'r') as bowtie_log:
        for line in bowtie_log:
          if 'processed:' in line:
            TOTAL = int(line.split('processed:')[1])
          if 'alignment:' in line:
            ALIGNED = int(line.split('alignment:')[1].split()[0])
          if 'due to -m:' in line:
            SUPRESSED = int(line.split('due to -m:')[1].split()[0])
      USED = ALIGNED
      with open(sys.argv[2], 'r') as rmdup_log:
        for line in rmdup_log:
          if '/' in line and 'Skip' not in line:
            splt = line.split('/')
            USED = int((splt[1].split('='))[0].strip()) - int((splt[0].split(']'))[1].strip())
      print TOTAL, ALIGNED, SUPRESSED, USED

      with open(sys.argv[3], 'w') as fof:
          fof.write("Tags total\tTranscriptome\tMulti-mapped\tOutside annotation\tUnmapped\tRibosomal contamination\n")
          fof.write(str(TOTAL) + "\t" + str(USED) + "\t" + str(MULTIMAPPED) + "\t" + str(ALIGNED-USED) + "\t" + str(TOTAL-ALIGNED-MULTIMAPPED) + "\t" + str(RIBO) + "\n")

    inputBinding:
      position: 5
    doc: |
      Python script to get TOTAL, ALIGNED, SUPRESSED, USED values from log files

  bowtie_log:
    type: File
    inputBinding:
      position: 6
    doc: |
      Log file from Bowtie

  rmdup_log:
    type: File
    inputBinding:
      position: 7
    doc: |
      Log file from samtools rmdup

  output_filename:
    type: string?
    doc: |
      Name for generated output file

  formatted_output_filename:
    type: string?
    inputBinding:
      position: 8
      valueFrom: $(get_formatted_output_filename())
    default: ""
    doc: |
      Name for generated formatted output file

outputs:

  output_file:
    type: stdout

  formatted_output_file:
    type: File
    outputBinding:
      glob: $(get_formatted_output_filename())

  total_reads:
    type: int
    outputBinding:
      loadContents: true
      glob: $(get_output_filename())
      outputEval: $(parseInt(self[0].contents.split(' ')[0]))

  mapped_reads:
    type: int
    outputBinding:
      loadContents: true
      glob: $(get_output_filename())
      outputEval: $(parseInt(self[0].contents.split(' ')[1]))

  supressed_reads:
    type: int
    outputBinding:
      loadContents: true
      glob: $(get_output_filename())
      outputEval: $(parseInt(self[0].contents.split(' ')[2]))

  used_reads:
    type: int
    outputBinding:
      loadContents: true
      glob: $(get_output_filename())
      outputEval: $(parseInt(self[0].contents.split(' ')[3]))

baseCommand: [python, '-c']

stdout: $(get_output_filename())


$namespaces:
  s: http://schema.org/

$schemas:
- http://schema.org/docs/schema_org_rdfa.html

s:name: "python-get-stat-rnaseq"
label: "python-get-stat-rnaseq"

s:downloadUrl: https://raw.githubusercontent.com/datirium/workflows/master/tools/python-get-stat-rnaseq.cwl
s:codeRepository: https://github.com/datirium/workflows
s:license: http://www.apache.org/licenses/LICENSE-2.0

s:isPartOf:
  class: s:CreativeWork
  s:name: Common Workflow Language
  s:url: http://commonwl.org/

s:creator:
- class: s:Organization
  s:legalName: "Datirium, LLC"
  s:logo: "https://datirium.com/assets/images/datirium_llc.svg"
  s:email: mailto:support@datirium.com
  s:location:
  - class: s:PostalAddress
    s:addressCountry: "USA"
    s:addressLocality: "Cincinnati"
    s:addressRegion: "OH"
    s:postalCode: "45226"
    s:streetAddress: "3559 Kroger Ave"
  s:member:
  - class: s:Person
    s:name: Artem Barski
    s:email: mailto:Artem.Barski@datirum.com
  - class: s:Person
    s:name: Andrey Kartashov
    s:email: mailto:Andrey.Kartashov@datirium.com
    s:sameAs:
    - id: http://orcid.org/0000-0001-9102-5681


doc: |
  Processing log files generated by BioWardrobe's ChIP-Seq workflows to produce expiriment quality table.

s:about: |
  Runs python code from the script input
